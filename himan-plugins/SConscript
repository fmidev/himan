#
# SConstruct for himan-plugins

Import('env')
import os
import sys

# cuda toolkit path


NOCUDA = env['NOCUDA']

if not NOCUDA:
    cuda_toolkit_path = '/usr/local/cuda'

    if os.environ.get('CUDA_TOOLKIT_PATH') is not None:
        cuda_toolkit_path = os.environ['CUDA_TOOLKIT_PATH']

have_cuda = False

if not NOCUDA and os.path.isfile(cuda_toolkit_path + '/lib64/libcudart.so'):
    have_cuda = True

# List all auxiliary plugins

auxiliary_plugins = ['cache','csv','fetcher','grib','hitool','querydata','writer','radon','geotiff']

# List all compiled plugins that have only CPU implementation here

compiled_plugins = ['icing', 'split_sum', 'seaicing', 'hybrid_pressure', 'hybrid_height',
'cloud_code', 'ncl', 'preform_pressure', 'preform_hybrid', 'density', 'precipitation_rate', 'absolute_humidity',
'weather_code_2', 'gust', 'monin_obukhov', 'fog', 'qnh', 'luatool',
'pot','pot_gfs','tke','visibility','fractile','pop','probability','auto_taf','stability_simple','tropopause','snow_drift','frost']

# List all compiled plugins that have both CPU and GPU implementation here

cuda_plugins = ['dewpoint', 'tpot', 'windvector', 'vvms', 'relative_humidity', 'transformer', 'stability', 'cape', 'unstagger', 'turbulence']

if have_cuda:
    env.Tool('cuda')

else:
    compiled_plugins.extend(cuda_plugins)

for p in auxiliary_plugins:

    file = 'source/' + p + '.cpp'
    env.SharedLibrary(target = p, source = [file])

for p in compiled_plugins:

    file = 'source/' + p + '.cpp'
    base = 'source/compiled_plugin_base.cpp'

    files = [file, base]

    env.SharedLibrary(target = p, source = files)

if have_cuda:
    for p in cuda_plugins:
        objects = []

        # cpp base class
        base = 'source/compiled_plugin_base.cpp'
        obj='obj/'+ base.replace(".cpp","")
        objects += env.SharedObject(obj, base)

        # cuda helper class
        cubase = 'source/cuda_plugin_helper.cu'
        cuobj='obj/'+ cubase.replace(".cu","")
        objects += env.SharedObject(cuobj, cubase)

        # cpp class definition
        file="source/" + p + ".cpp"
        obj='obj/'+ file.replace(".cpp","")
        objects += env.SharedObject(obj, file)

        # cuda functions definition
        cufile="source/" + p + ".cu"
        obj='obj/cu_'+ cufile.replace(".cu","")

        if p == "unstagger":
            nvcc = env['NVCCFLAGS'][:] # need to copy flags or changes affect all cufiles
            if '-G' in nvcc:
                nvcc.remove('-G')
            objects += env.SharedObject(obj, cufile, NVCCFLAGS=nvcc)

        else:
            objects += env.SharedObject(obj, cufile)

        env.SharedLibrary(target = p, source = objects)
