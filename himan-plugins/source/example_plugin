/**
 * @file example_plugin.cpp
 *
 * Template for future plugins.
 *
 */

#include "example_header.h"
#include "forecast_time.h"
#include "level.h"
#include "logger.h"

using namespace std;
using namespace himan::plugin;

example_plugin::example_plugin()
{
	itsLogger = logger("example_plugin");
}

void example_plugin::Process(std::shared_ptr<const plugin_configuration> conf)
{
	Init(conf);

	/*
	 * Set target parameter properties
	 * - name PARM_NAME, this name is found from neons. For example: T-K
	 */

	param theRequestedParam(PARM_NAME);

	// If this param is also used as a source param for other calculations
	// (like for example dewpoint, relative humidity), unit should also be
	// specified

	theRequestedParam.Unit(kSOME_UNIT);

	SetParams({theRequestedParam});

	Start();
}

/*
 * Calculate()
 *
 * This function does the actual calculation.
 */

void example_plugin::Calculate(shared_ptr<info<double>> myTargetInfo, unsigned short threadIndex)
{
	/*
	 * Required source parameters
	 *
	 * eg. param PParam("P-PA"); for pressure in pascals
	 *
	 */

	const param exampleParam("quantity-unit_name");

	// ----

	// Current time and level as given to this thread

	forecast_time forecastTime = myTargetInfo->Time();
	level forecastLevel = myTargetInfo->Level();

	auto myThreadedLogger = logger(fmt::format("example_pluginThread #{}", threadIndex));

	myThreadedLogger.Debug(fmt::format("Calculating time {} level {}",
	                                   static_cast<string>(forecastTime.ValidDateTime()),
	                                   static_cast<string>(forecastLevel)));

	shared_ptr<info<double>> exampleInfo = Fetch(forecastTime, forecastLevel, exampleParam);

	if (!exampleInfo)
	{
		myThreadedLogger.Info(
		    fmt::format("Skipping step {} level {}", forecastTime.Step().String(), static_cast<string>(forecastLevel)));
		return;
	}

	// If calculating for hybrid levels, A/B vertical coordinates must be set
	// (copied from source)

	SetAB(myTargetInfo, exampleInfo);

	string deviceType = "CPU";

	const double a = 0.125;
	const double b = 15;

	auto& target = VEC(myTargetInfo);

	for (auto&& tup : zip_range(target, VEC(exampleInfo)))
	{
		double& result = tup.get<0>();
		const double x = tup.get<1>();

		/* Calculations go here */

		result = a * x + b;
	}

	myThreadedLogger.Info("[{}] Missing values: {}/{}", deviceType, myTargetInfo->Data()->MissingCount(),
	                      myTargetInfo->Data()->Size());
}
