/**
 * @file example_plugin.cpp
 *
 * Template for future plugins.
 *
 */

#include <boost/lexical_cast.hpp>

#include "example_header.h"
#include "forecast_time.h"
#include "level.h"
#include "logger.h"

using namespace std;
using namespace himan::plugin;

example_plugin::example_plugin()
{
	itsLogger = logger("example_plugin");
}

void example_plugin::Process(std::shared_ptr<const plugin_configuration> conf)
{
	Init(conf);

	/*
	 * Set target parameter properties
	 * - name PARM_NAME, this name is found from neons. For example: T-K
	 * - univ_id UNIV_ID, newbase-id, ie code table 204
	 * - grib1 id must be in database
	 * - grib2 descriptor X'Y'Z, http://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_table4-2.shtml
	 *
	 */

	param theRequestedParam(PARM_NAME, UNIV_ID, GRIB2DISCIPLINE, GRIB2CATEGORY, GRIB2NUMBER);

	// If this param is also used as a source param for other calculations
	// (like for example dewpoint, relative humidity), unit should also be
	// specified

	theRequestedParam.Unit(kSOME_UNIT);

	SetParams({theRequestedParam});

	Start();
}

/*
 * Calculate()
 *
 * This function does the actual calculation.
 */

void example_plugin::Calculate(shared_ptr<info<double>> myTargetInfo, unsigned short threadIndex)
{
	/*
	 * Required source parameters
	 *
	 * eg. param PParam("P-Pa"); for pressure in pascals
	 *
	 */

	const param exampleParam("quantity-unit_name");

	// ----

	// Current time and level as given to this thread

	forecast_time forecastTime = myTargetInfo->Time();
	level forecastLevel = myTargetInfo->Level();

	auto myThreadedLogger = logger("example_pluginThread #" + boost::lexical_cast<string> (threadIndex)));

	myThreadedLogger.Debug("Calculating time " + static_cast<string>(forecastTime.ValidDateTime()) + " level " +
	                       static_cast<string>(forecastLevel));

	shared_ptr<info<double>> exampleInfo = Fetch(forecastTime, forecastLevel, exampleParam);

	if (!exampleInfo)
	{
		myThreadedLogger.Info("Skipping step " + boost::lexical_cast<string>(forecastTime.Step()) + ", level " +
		                      static_cast<string>(forecastLevel));

		return;
	}

	// If calculating for hybrid levels, A/B vertical coordinates must be set
	// (copied from source)

	SetAB(myTargetInfo, exampleInfo);

	string deviceType = "CPU";

	const double a = 0.125;
	const double b = 15;

	LOCKSTEP(myTargetInfo, exampleInfo)
	{
		double x = exampleInfo->Value();

		if (x == kFloatMissing)
		{
			continue;
		}

		/* Calculations go here */

		double y = a * example + b;

		myTargetInfo->Value(y);
	}

	myThreadedLogger.Info("[" + deviceType +
	                      "] Missing values: " + boost::lexical_cast<string>(myTargetInfo->Data()->MissingCount()) +
	                      "/" + boost::lexical_cast<string>(myTargetInfo->Data()->Size()));
}
